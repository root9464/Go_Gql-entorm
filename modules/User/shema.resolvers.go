package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"
	"root/database/user"
	"root/graphql/model"

	"github.com/sirupsen/logrus"
)

var log = logrus.New()

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {

	user, err := r.Client.User.Create().
		SetName(input.Name).
		SetEmail(input.Email).
		SetPassword(input.Password).
		Save(ctx)

	if err != nil {
		log.WithError(err).Error("Failed to create user")
		return nil, errors.New("Failed to create user")
	}

	return &model.User{ID: int(user.ID), Name: user.Name, Email: user.Email, Password: user.Password}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input model.UpdateUserInput) (*model.User, error) {

	if id == 0 {
		log.Error("Invalid user id")
		return nil, errors.New("Invalid user id")
	}

	update := r.Client.User.UpdateOneID(id)

	switch {
	case input.Name != nil:
		update.SetName(*input.Name)
	case input.Email != nil:
		update.SetEmail(*input.Email)
	case input.Password != nil:
		update.SetPassword(*input.Password)
	}

	updatedUser, err := update.Save(ctx)
	if err != nil {
		log.WithError(err).Error("Failed to update user")
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	return &model.User{
		ID:       updatedUser.ID,
		Name:     updatedUser.Name,
		Email:    updatedUser.Email,
		Password: updatedUser.Password,
	}, nil

}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (bool, error) {

	if id == 0 {
		log.Error("Invalid user id")
		return false, errors.New("Invalid user id")
	}

	err := r.Client.User.DeleteOneID(id).Exec(ctx)

	if err != nil {
		log.WithError(err).Error("Failed to delete user")
		return false, errors.New("Failed to delete user")
	}

	return true, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id int) (*model.User, error) {

	if id == 0 {
		log.Error("Invalid user id")
		return nil, errors.New("Invalid user id")
	}

	user, err := r.Client.User.Query().Where(user.IDEQ(id)).Only(ctx)
	if err != nil {
		log.WithError(err).Error("Failed to fetch user")
		return nil, errors.New("Failed to fetch user")
	}

	return &model.User{ID: int(user.ID), Name: user.Name, Email: user.Email, Password: user.Password}, nil
}

// GetAllUsers is the resolver for the getAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	users, err := r.Client.User.Query().All(ctx)
	if err != nil {
		log.WithError(err).Error("Failed to fetch users")
		return nil, errors.New("Failed to fetch users")
	}

	modelUsers := make([]*model.User, len(users))

	for i, u := range users {
		modelUsers[i] = &model.User{
			ID:       u.ID,
			Name:     u.Name,
			Email:    u.Email,
			Password: u.Password,
		}
	}

	return modelUsers, nil

}
